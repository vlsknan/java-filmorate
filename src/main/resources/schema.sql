CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID      INT PRIMARY KEY AUTO_INCREMENT,
    MPA_NAME    CHARACTER VARYING(10)
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      LONG PRIMARY KEY AUTO_INCREMENT,
    NAME         VARCHAR(50),
    FILM_NAME    CHARACTER VARYING(100) NOT NULL,
    DESCRIPTION  CHARACTER VARYING(200) DEFAULT 'UNKNOWN',
    RELEASE_DATE DATE                   NOT NULL,
    DURATION     INTEGER                NOT NULL,
    MPA_ID       INTEGER REFERENCES MPA(MPA_ID)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(50)
);

CREATE TABLE IF NOT EXISTS FILMS_GENRES
(
    GENRE_ID   INTEGER REFERENCES GENRES(GENRE_ID) ON DELETE CASCADE,
    FILM_ID    LONG REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
    CONSTRAINT FILMS_GENRES_PK
        PRIMARY KEY (GENRE_ID, FILM_ID)
);

CREATE TABLE IF NOT EXISTS DIRECTORS
(
    DIRECTOR_ID LONG PRIMARY KEY AUTO_INCREMENT,
    NAME        CHARACTER VARYING(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS_DIRECTORS
(
    FILM_ID     LONG REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
    DIRECTOR_ID LONG REFERENCES DIRECTORS(DIRECTOR_ID) ON DELETE CASCADE,
    CONSTRAINT FILMS_DIRECTORS_PK
        PRIMARY KEY (FILM_ID, DIRECTOR_ID)
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   LONG PRIMARY KEY AUTO_INCREMENT,
    USER_NAME CHARACTER VARYING(100) NOT NULL,
    LOGIN     CHARACTER VARYING(100),
    EMAIL     CHARACTER VARYING(100) NOT NULL,
    BIRTHDAY  DATE                   NOT NULL
);

CREATE UNIQUE INDEX USERS_EMAIL_UINDEX
    ON USERS (EMAIL);

CREATE UNIQUE INDEX USERS_LOGIN_UINDEX
    ON USERS (LOGIN);


CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID LONG REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
    USER_ID LONG REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT LIKES_PK
        PRIMARY KEY (FILM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   LONG REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FRIEND_ID LONG REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    PRIMARY KEY (USER_ID, FRIEND_ID)
);


CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID   LONG PRIMARY KEY AUTO_INCREMENT,
    CONTENT     CHARACTER VARYING(255) NOT NULL,
    IS_POSITIVE BOOLEAN NOT NULL,
    USER_ID     LONG NOT NULL,
    FILM_ID     LONG NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEW_LIKES
(
    REVIEW_ID   LONG REFERENCES REVIEWS (REVIEW_ID) ON DELETE CASCADE NOT NULL,
    USER_ID     LONG REFERENCES USERS (USER_ID) ON DELETE CASCADE NOT NULL,
    CONSTRAINT REVIEW_LIKES_PK
        PRIMARY KEY (REVIEW_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS REVIEW_DISLIKES
(
    REVIEW_ID   LONG REFERENCES REVIEWS (REVIEW_ID) ON DELETE CASCADE NOT NULL,
    USER_ID     LONG REFERENCES USERS (USER_ID) ON DELETE CASCADE NOT NULL,
    CONSTRAINT REVIEW_DISLIKES_PK
        PRIMARY KEY (REVIEW_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID   LONG PRIMARY KEY AUTO_INCREMENT,
    TIMESTAMP  LONG,
    USER_ID    LONG REFERENCES USERS (USER_ID) ON DELETE CASCADE NOT NULL,
    EVENT_TYPE VARCHAR,
    OPERATION  VARCHAR,
    ENTITY_ID  LONG,
    CONSTRAINT EV_TYPE CHECK (EVENT_TYPE IN ('LIKE', 'REVIEW', 'FRIEND')),
    CONSTRAINT OP_TYPE CHECK (OPERATION IN ('REMOVE', 'ADD', 'UPDATE'))
);

